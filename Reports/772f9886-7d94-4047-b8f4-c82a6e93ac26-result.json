{"name": "test_drag", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=106.0.5249.62)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00461ED3+2236115]\n\tOrdinal0 [0x003F92F1+1807089]\n\tOrdinal0 [0x003066FD+812797]\n\tOrdinal0 [0x002F9449+758857]\n\tOrdinal0 [0x002F92C1+758465]\n\tOrdinal0 [0x002F8113+753939]\n\tOrdinal0 [0x002F8748+755528]\n\tOrdinal0 [0x003015D2+792018]\n\tOrdinal0 [0x0030CB15+838421]\n\tOrdinal0 [0x0030FEB0+851632]\n\tOrdinal0 [0x002F8ADC+756444]\n\tOrdinal0 [0x0030C94F+837967]\n\tOrdinal0 [0x0036590A+1202442]\n\tOrdinal0 [0x003518A6+1120422]\n\tOrdinal0 [0x0032A73D+960317]\n\tOrdinal0 [0x0032B71F+964383]\n\tGetHandleVerifier [0x0070E7E2+2743074]\n\tGetHandleVerifier [0x007008D4+2685972]\n\tGetHandleVerifier [0x004F2BAA+532202]\n\tGetHandleVerifier [0x004F1990+527568]\n\tOrdinal0 [0x0040080C+1837068]\n\tOrdinal0 [0x00404CD8+1854680]\n\tOrdinal0 [0x00404DC5+1854917]\n\tOrdinal0 [0x0040ED64+1895780]\n\tBaseThreadInitThunk [0x760FFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77537B5E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77537B2E+238]", "trace": "self = <test_casess.Test_demo.Test_demo object at 0x00000242D10AC5E0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ee68c5f505f99d48b35ec991912d372\")>\n\n    def test_drag(self,setup):\n        self.driver = setup\n        self.driver.get(self.baseurl)\n        self.objdrop = Demo_page(self.driver)\n        self.objdrop.checkbox()\n>       self.objdrop.draganddrop()\n\ntest_casess\\Test_demo.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobj\\login_page.py:67: in draganddrop\n    ActionChains(self.driver).drag_and_drop(sourceele,targetele).perform()\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:78: in perform\n    self.w3c_actions.perform()\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:88: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000242D113B460>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77537B5E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77537B2E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=106.0.5249.62)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00461ED3+2236115]\nE       \tOrdinal0 [0x003F92F1+1807089]\nE       \tOrdinal0 [0x003066FD+812797]\nE       \tOrdinal0 [0x002F9449+758857]\nE       \tOrdinal0 [0x002F92C1+758465]\nE       \tOrdinal0 [0x002F8113+753939]\nE       \tOrdinal0 [0x002F8748+755528]\nE       \tOrdinal0 [0x003015D2+792018]\nE       \tOrdinal0 [0x0030CB15+838421]\nE       \tOrdinal0 [0x0030FEB0+851632]\nE       \tOrdinal0 [0x002F8ADC+756444]\nE       \tOrdinal0 [0x0030C94F+837967]\nE       \tOrdinal0 [0x0036590A+1202442]\nE       \tOrdinal0 [0x003518A6+1120422]\nE       \tOrdinal0 [0x0032A73D+960317]\nE       \tOrdinal0 [0x0032B71F+964383]\nE       \tGetHandleVerifier [0x0070E7E2+2743074]\nE       \tGetHandleVerifier [0x007008D4+2685972]\nE       \tGetHandleVerifier [0x004F2BAA+532202]\nE       \tGetHandleVerifier [0x004F1990+527568]\nE       \tOrdinal0 [0x0040080C+1837068]\nE       \tOrdinal0 [0x00404CD8+1854680]\nE       \tOrdinal0 [0x00404DC5+1854917]\nE       \tOrdinal0 [0x0040ED64+1895780]\nE       \tBaseThreadInitThunk [0x760FFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77537B5E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77537B2E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: TimeoutException"}, "start": 1664429762516, "stop": 1664431276898, "uuid": "6516ad7c-ba62-494b-a12c-564775735621", "historyId": "db6ce66cc4dbfc4e0f196f8d12765eb3", "testCaseId": "2618f3449d9e858507148a70f3e2ce69", "fullName": "test_casess.Test_demo.Test_demo#test_drag", "labels": [{"name": "parentSuite", "value": "test_casess"}, {"name": "suite", "value": "Test_demo"}, {"name": "subSuite", "value": "Test_demo"}, {"name": "host", "value": "DESKTOP-DQEGEKV"}, {"name": "thread", "value": "3048-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_casess.Test_demo"}]}